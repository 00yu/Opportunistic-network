/* 
 * Copyright 2010 Aalto University, ComNet
 * Released under GPLv3. See LICENSE.txt for details. 
 */
package routing;
//按概率分配副本数
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import core.Connection;
import core.DTNHost;
import core.Message;
import core.Settings;
import core.SimClock;
import util.Tuple;

/**
 * Implementation of Spray and wait router as depicted in 
 * <I>Spray and Wait: An Efficient Routing Scheme for Intermittently
 * Connected Mobile Networks</I> by Thrasyvoulos Spyropoulus et al.
 *
 */
public class nProposed extends ActiveRouter {
	private Set<String> ackedMessageIds=new HashSet<String>();
	public static final double P_INIT = 0.95;
	/** delivery predictability transitivity scaling constant default value */
	public static final double DEFAULT_BETA = 0.95;
	/** delivery predictability aging constant */
	public static final double GAMMA = 0.8;
	public static final double DEFAULT_XITA = 0.6;
	public static final double DEFAULT_DEERTA=0.5;
	/**
	 * Number of seconds in time unit -setting id ({@value}).
	 * How many seconds one time unit is when calculating aging of 
	 * delivery predictions. Should be tweaked for the scenario.*/
    public static final String SECONDS_IN_UNIT_S ="secondsInTimeUnit";
    /**
	 * Transitivity scaling constant (beta) -setting id ({@value}).
	 * Default value for setting is {@link #DEFAULT_BETA}.
	 */
	public static final String BETA_S = "beta";
	public static final String XITA_S = "xita";
	public static final String DEERTA_S = "deerta";
	/** the value of nrof seconds in time unit -setting */
	private int secondsInTimeUnit;
	/** value of beta setting */
	private double beta;
	private double θ;
	private double δ;
	/** delivery predictabilities */
	private Map<DTNHost, Double> preds;
	/** last delivery predictability update (sim)time */
	private double lastAgeUpdate;
	
	/** identifier for the initial number of copies setting ({@value})*/ 
	public static final String NROF_COPIES = "nrofCopies";
	/** identifier for the binary-mode setting ({@value})*/ 
	public static final String BINARY_MODE = "binaryMode";
	/** SprayAndWait router's settings name space ({@value})*/ 
	public static final String Proposed_NS = "nProposed";
	/** Message property key */
	public static final String MSG_COUNT_PROPERTY = Proposed_NS + "." +
		"copies";
	public static final String UTILITY = Proposed_NS + "." +
			"utility";
	public static final String FLAG = Proposed_NS + "." +
			"flag";
	
	
	protected int initialNrofCopies;
	protected boolean isBinary;

	public nProposed(Settings s) {
		super(s);
		Settings sawSettings = new Settings(Proposed_NS);
		
		initialNrofCopies = sawSettings.getInt(NROF_COPIES);
		isBinary = sawSettings.getBoolean( BINARY_MODE);
		secondsInTimeUnit=sawSettings.getInt(SECONDS_IN_UNIT_S);
		if (sawSettings.contains(BETA_S)) {
			beta = sawSettings.getDouble(BETA_S);
		}
		else {
			beta = DEFAULT_BETA;
		}
		if (sawSettings.contains(XITA_S)) {
			θ = sawSettings.getDouble(XITA_S);
		}
		else {
			θ = DEFAULT_XITA;
		}
		if (sawSettings.contains(DEERTA_S)) {
			δ = sawSettings.getDouble(DEERTA_S);
		}
		else {
			δ = DEFAULT_DEERTA;
		}
	}
	
	/**
	 * Copy constructor.
	 * @param r The router prototype where setting values are copied from
	 */
	protected nProposed(nProposed r) {
		super(r);
		this.initialNrofCopies = r.initialNrofCopies;
		this.isBinary = r.isBinary;
		this.secondsInTimeUnit=r.secondsInTimeUnit;
		this.beta=r.beta;
		this.θ=r.θ;
		this.δ=r.δ;
		this.preds=new HashMap<DTNHost,Double>();
		this.ackedMessageIds = new HashSet<String>();
	}
	
	@Override
	public void changedConnection(Connection con) {
		if (con.isUp()) {
			DTNHost otherHost = con.getOtherNode(getHost());
			checkAck(otherHost);
			/**记录当前连接开始时间和相遇节点*/
			getHost().setstartTime(SimClock.getTime());
			otherHost.setstartTime(SimClock.getTime());
			double endTime1=getHost().getendTime();
			double endTime2=otherHost.getendTime();
			double separationDuration1=getHost().getseparationDuration();
			separationDuration1+=Math.pow(SimClock.getTime()-endTime1, 2);
			double separationDuration2=getHost().getseparationDuration();
			separationDuration2+=Math.pow(SimClock.getTime()-endTime2, 2); 
			double propertion1=0;
			propertion1=SimClock.getTime()/separationDuration1;
			double propertion2=0;
			propertion2=SimClock.getTime()/separationDuration2;
			getHost().setpropertion(propertion1);
			otherHost.setpropertion(propertion2);
			updateDeliveryPredFor(otherHost);
			updateTransitivePreds(otherHost);
		}
		else {/**连接断开(连接状态改变)*/
			DTNHost otherHost = con.getOtherNode(getHost());
			/**记录当前连接断开时间和相遇节点*/
			getHost().setendTime(SimClock.getTime());
			otherHost.setendTime(SimClock.getTime());
		}
	}
	
	// 更新ACK表并删除多余副本
				private void checkAck(DTNHost otherHost) {

					MessageRouter mRouter = otherHost.getRouter();

					assert mRouter instanceof MaxPropRouter : "MaxProp only works "
							+ " with other routers of same type";
					nProposed otherRouter = (nProposed) mRouter;

					/* exchange ACKed message data */
					if(otherRouter.ackedMessageIds!=null){
						this.ackedMessageIds.addAll(otherRouter.ackedMessageIds);
						otherRouter.ackedMessageIds.addAll(this.ackedMessageIds);

					}
					// otherRouter.ackedMessageIds.addAll(this.ackedMessageIds);

					if(this.ackedMessageIds!=null){
						deleteAckedMessages();
						otherRouter.deleteAckedMessages();
					}
					// otherRouter.deleteAckedMessages();
				}
				private void deleteAckedMessages() {
					for (String id : this.ackedMessageIds) {
						if (this.hasMessage(id) && !isSending(id)) {
							this.deleteMessage(id, false);
						}
					}
				}

	/**
	 * Updates delivery predictions for a host.
	 * <CODE>P(a,b) = P(a,b)_old + (1 - P(a,b)_old) * P_INIT</CODE>
	 * @param host The host we just met
	 */
	private void updateDeliveryPredFor(DTNHost host) {
		double oldValue = getPredFor(host);
		double newValue = oldValue + (1 - oldValue) * P_INIT;
		preds.put(host, newValue);
	}
	/**
	 * Returns the current prediction (P) value for a host or 0 if entry for
	 * the host doesn't exist.
	 * @param host The host to look the P for
	 * @return the current P value
	 */
	public double getPredFor(DTNHost host) {
		ageDeliveryPreds(); // make sure preds are updated before getting
		if (preds.containsKey(host)) {
			return preds.get(host);
		}
		else {
			return 0;
		}
	}
	/**
	 * Updates transitive (A->B->C) delivery predictions.
	 * <CODE>P(a,c) = P(a,c)_old + (1 - P(a,c)_old) * P(a,b) * P(b,c) * BETA
	 * </CODE>
	 * @param host The B host who we just met
	 */
	private void updateTransitivePreds(DTNHost host) {
		MessageRouter otherRouter = host.getRouter();
		assert otherRouter instanceof ProphetRouter : "PRoPHET only works " + 
			" with other routers of same type";
		
		double pForHost = getPredFor(host); // P(a,b)
		Map<DTNHost, Double> othersPreds = 
			((nProposed)otherRouter).getDeliveryPreds();
		
		for (Map.Entry<DTNHost, Double> e : othersPreds.entrySet()) {
			if (e.getKey() == getHost()) {
				continue; // don't add yourself
			}
			
			double pOld = getPredFor(e.getKey()); // P(a,c)_old
			double pNew = pOld + ( 1 - pOld) * pForHost * e.getValue() * beta;
			preds.put(e.getKey(), pNew);
		}
	}
	/**
	 * Returns a map of this router's delivery predictions
	 * @return a map of this router's delivery predictions
	 */
	private Map<DTNHost, Double> getDeliveryPreds() {
		ageDeliveryPreds(); // make sure the aging is done
		return this.preds;
	}
	/**
	 * Ages all entries in the delivery predictions.
	 * <CODE>P(a,b) = P(a,b)_old * (GAMMA ^ k)</CODE>, where k is number of
	 * time units that have elapsed since the last time the metric was aged.
	 * @see #SECONDS_IN_UNIT_S
	 */
	private void ageDeliveryPreds() {
		double timeDiff = (SimClock.getTime() - this.lastAgeUpdate) / 
			secondsInTimeUnit;
		
		if (timeDiff == 0) {
			return;
		}
		
		double mult = Math.pow(GAMMA, timeDiff);
		for (Map.Entry<DTNHost, Double> e : preds.entrySet()) {
			e.setValue(e.getValue()*mult);
		}
		
		this.lastAgeUpdate = SimClock.getTime();
	}
	
	@Override
	public int receiveMessage(Message m, DTNHost from) {
		return super.receiveMessage(m, from);
	}
	
	@Override
	public Message messageTransferred(String id, DTNHost from) {//接收方
		Message msg = super.messageTransferred(id, from);
		nProposed othRouter = (nProposed)from.getRouter();
		//此时是发送端没有分配前的总副本数
		Integer nrofCopies = (Integer)msg.getProperty(MSG_COUNT_PROPERTY);
		assert nrofCopies != null : "Not a SnW message: " + msg;
		if (isBinary) {
			Message msg1 = othRouter.getMessage(id);
			if(msg1!=null){
				Integer remaining = (Integer)msg1.getProperty(MSG_COUNT_PROPERTY);
				nrofCopies=nrofCopies-remaining;//发送的副本数
			}
		}
		msg.updateProperty(MSG_COUNT_PROPERTY, nrofCopies);
		if (isDeliveredMessage(msg)) {
			this.ackedMessageIds.add(id);
		}
		return msg;
	}
	
	@Override 
	public boolean createNewMessage(Message msg) {
		makeRoomForNewMessage(msg.getSize());
		msg.setTtl(this.msgTtl);
		msg.addProperty(MSG_COUNT_PROPERTY, new Integer(initialNrofCopies));
		msg.addProperty(UTILITY, new Double(0));
		msg.addProperty(FLAG, new Integer(0));
		addToMessages(msg, true);
		return true;
	}
	
	@Override
	public void update() {
		super.update();
		if (!canStartTransfer() || isTransferring()) {
			return; // nothing to transfer or is currently transferring 
		}

		/* try messages that could be delivered to final recipient */
		if (exchangeDeliverableMessages() != null) {
			return;
			
		}
		/* create a list of SAWMessages that have copies left to distribute */
		@SuppressWarnings(value = "unchecked")
		List<Message> copiesLeft = sortByQueueMode(getMessagesWithCopiesLeft());
		//@SuppressWarnings(value = "unchecked")
		//List<Message> copiesOne = sortByQueueMode(getMessagesWithCopiesOne());//喷射阶段
		if (copiesLeft.size() > 0) {
			/* try to send those messages */
			this.tryMessagesToConnections(copiesLeft, getConnections());
		}
		//if(copiesOne.size()>0) {
		//	this.tryMessagesToConnectionsWait(copiesOne, getConnections());
		//}
		
	}
	
	/**
	 * Creates and returns a list of messages this router is currently
	 * carrying and still has copies left to distribute (nrof copies > 1).
	 * @return A list of messages that have copies left
	 */
	protected List<Message> getMessagesWithCopiesLeft() {
		List<Message> list = new ArrayList<Message>();
		for (Message m : getMessageCollection()) {
			Integer nrofCopies = (Integer)m.getProperty(MSG_COUNT_PROPERTY);
			assert nrofCopies != null : "SnW message " + m + " didn't have " + 
				"nrof copies property!";
			if (nrofCopies > 1) {
				list.add(m);
			}
		}
		return list;
	}
	
	protected List<Message> getMessagesWithCopiesOne() {
		List<Message> list = new ArrayList<Message>();

		for (Message m : getMessageCollection()) {
			Integer nrofCopies = (Integer)m.getProperty(MSG_COUNT_PROPERTY);
			assert nrofCopies != null : "SnW message " + m + " didn't have " + 
				"nrof copies property!";
			if (nrofCopies == 1) {
				list.add(m);
			}
		}
		return list;
	}
	
	protected Connection tryMessagesToConnections(List<Message> messages,
			List<Connection> connections) {
		for (int i=0, n=connections.size(); i<n; i++) {
			Connection con = connections.get(i);
			Message started = tryAllMessages(con, messages); 
			if (started != null) { 
				return con;
			}
		}
		
		return null;
	}
	
	protected Message tryAllMessages(Connection con, List<Message> messages) {
			for (Message m : messages) {
				DTNHost other = con.getOtherNode(getHost());
				nProposed otherRouter = (nProposed)other.getRouter();
				if (otherRouter.hasMessage(m.getId())) {
					continue; // skip messages that the other one has
				}
				double p1=getPredFor(m.getTo());
				double p2=otherRouter.getPredFor(m.getTo());
				double propertion1=getHost().getpropertion();
				double propertion2=other.getpropertion();
				double utility=0;
				if(p1+p2==0) {
					utility=(1-θ)*(propertion2/(propertion1+propertion2));
				}
				else {
					utility=θ*(p2/(p1+p2))+(1-θ)*(propertion2/(propertion1+propertion2));
				}
					Integer nrofCopies = (Integer)m.getProperty(MSG_COUNT_PROPERTY);
					if((int)Math.floor(utility*nrofCopies)>0) {
						int retVal = startTransfer(m, con); 
						if (retVal == RCV_OK) {
							m.updateProperty(UTILITY, utility);
							return m;	// accepted a message, don't try others
						}
					else if (retVal > 0) {
						return null; // should try later -> don't bother trying others
					}
					}
				}
			return null; // no message was accepted		
	}
	
	protected Connection tryMessagesToConnectionsWait(List<Message> messages,
			List<Connection> connections) {
		for (int i=0, n=connections.size(); i<n; i++) {
			Connection con = connections.get(i);
			Message started = tryAllMessagesWait(con, messages); 
			if (started != null) { 
				return con;
			}
		}
		
		return null;
	}
	
	protected Message tryAllMessagesWait(Connection con, List<Message> messages) {
		for (Message m : messages) {
			DTNHost other = con.getOtherNode(getHost());
			nProposed otherRouter = (nProposed)other.getRouter();
			if (otherRouter.hasMessage(m.getId())) {
				continue; // skip messages that the other one has
			}
			double p1=getPredFor(m.getTo());
			double p2=otherRouter.getPredFor(m.getTo());
			double propertion1=getHost().getpropertion();
			double propertion2=other.getpropertion();
			double utility=0;
			if(p1+p2==0) {
				utility=(1-θ)*(propertion2/(propertion1+propertion2));
			}
			else {
				utility=θ*(p2/(p1+p2))+(1-θ)*(propertion2/(propertion1+propertion2));
			}
			if(utility>0.7 && (1-other.getBufferOccupancy()/100)*otherRouter.getBufferSize()>m.getSize()) {	
				int retVal = startTransfer(m, con); 
				if (retVal == RCV_OK) {
					return m;	// accepted a message, don't try others
				}
			else if (retVal > 0) { 
				return null; // should try later -> don't bother trying others
			}
			}
		}
		
		return null; // no message was accepted		
	}
	
	/**
	 * Called just before a transfer is finalized (by 
	 * {@link ActiveRouter#update()}).
	 * Reduces the number of copies we have left for a message. 
	 * In binary Spray and Wait, sending host is left with floor(n/2) copies,
	 * but in standard mode, nrof copies left is reduced by one. 
	 */
	@Override
	protected void transferDone(Connection con) {
		String msgId = con.getMessage().getId();
		/* get this router's copy of the message */
		Message msg = getMessage(msgId);
		if (msg == null) { // message has been dropped from the buffer after..
			return; // ..start of transfer -> no need to reduce amount of copies
		}
		Integer nrofCopies = (Integer)msg.getProperty(MSG_COUNT_PROPERTY);
		double utility=(Double)msg.getProperty(UTILITY);
		if (isBinary) {
			if(msg.getTo()==con.getOtherNode(getHost())) {
				nrofCopies=0;
			}
			else {
				nrofCopies =nrofCopies-(int)Math.floor((utility)*nrofCopies);
			}
			//if(nrofCopies>1 && utility>0)
			//	nrofCopies =nrofCopies-(int)Math.floor((utility)*nrofCopies);
			//else{
			//	nrofCopies/=2;
			//}
		}
		if(nrofCopies==0) {
			this.deleteMessage(msgId, false);
		}
		else {
			msg.updateProperty(MSG_COUNT_PROPERTY, nrofCopies);
		}
	}
	
	@Override
	public nProposed replicate() {
		return new nProposed(this);
	}
//	protected boolean makeRoomForMessage(int size){
//		if (size > this.getBufferSize()) {
//			return false; // message too big for the buffer
//		}
//		int freeBuffer = this.getFreeBufferSize();
//		/* delete messages from the buffer until there's enough space */
//		Collection<Message> messages = this.getMessageCollection();
//		while(freeBuffer<size) {
//			List<Message> selected=new ArrayList<Message>();
//			int threshold=size-freeBuffer;
//			for(Message m:messages) {
//				if(m.getSize()>=threshold) {
//					selected.add(m);
//				}
//			}
//			if(!selected.isEmpty()) {
//				Message oldest = null;
//				for (Message m : selected) {
//					
//					if (isSending(m.getId())) {
//						continue; // skip the message(s) that router is sending
//					}
//					
//					if (oldest == null ) {
//						oldest = m;
//					}
//					else {
//						double u1=δ*((Integer)oldest.getProperty(MSG_COUNT_PROPERTY)*1.0)/((initialNrofCopies)*1.0)+(1-δ)*((oldest.getTtl()*1.0)/(oldest.getInitiTtl()*1.0));
//						double u2=δ*((Integer)m.getProperty(MSG_COUNT_PROPERTY)*1.0)/((initialNrofCopies)*1.0)+(1-δ)*((m.getTtl()*1.0)/(m.getInitiTtl()*1.0));
//						if(u1>u2) {
//							oldest=m;
//						}
//					}
//				}
//				if (oldest == null) {
//					for (Message m : messages) {
//						
//						if (isSending(m.getId())) {
//							continue; // skip the message(s) that router is sending
//						}
//						
//						if (oldest == null ) {
//							oldest = m;
//						}
//						else {
//							double u1=δ*((Integer)oldest.getProperty(MSG_COUNT_PROPERTY)*1.0)/((initialNrofCopies)*1.0)+(1-δ)*((oldest.getTtl()*1.0)/(oldest.getInitiTtl()*1.0));
//							double u2=δ*((Integer)m.getProperty(MSG_COUNT_PROPERTY)*1.0)/((initialNrofCopies)*1.0)+(1-δ)*((m.getTtl()*1.0)/(m.getInitiTtl()*1.0));
//							if(u1>u2) {
//								oldest=m;
//							}
//						}
//					}
//					if (oldest == null) {
//						return false; // couldn't remove any more messages
//					}			
//					
//					/* delete message from the buffer as "drop" */
//					deleteMessage(oldest.getId(), true);
//					freeBuffer += oldest.getSize();
//					continue;
//				}			
//				
//				/* delete message from the buffer as "drop" */
//				deleteMessage(oldest.getId(), true);
//				freeBuffer += oldest.getSize();
//			}
//			else {
//				Message oldest = null;
//				for (Message m : messages) {
//					
//					if (isSending(m.getId())) {
//						continue; // skip the message(s) that router is sending
//					}
//					
//					if (oldest == null ) {
//						oldest = m;
//					}
//					else {
//						double u1=δ*((Integer)oldest.getProperty(MSG_COUNT_PROPERTY)*1.0)/((initialNrofCopies)*1.0)+(1-δ)*((oldest.getTtl()*1.0)/(oldest.getInitiTtl()*1.0));
//						double u2=δ*((Integer)m.getProperty(MSG_COUNT_PROPERTY)*1.0)/((initialNrofCopies)*1.0)+(1-δ)*((m.getTtl()*1.0)/(m.getInitiTtl()*1.0));
//						if(u1>u2) {
//							oldest=m;
//						}
//					}
//				}
//				if (oldest == null) {
//					return false; // couldn't remove any more messages
//				}			
//				
//				/* delete message from the buffer as "drop" */
//				deleteMessage(oldest.getId(), true);
//				freeBuffer += oldest.getSize();
//			}
//		}
//		return true;
//	}
	
}
