/* 
 * Copyright 2010 Aalto University, ComNet
 * Released under GPLv3. See LICENSE.txt for details. 
 */
package routing;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import core.Connection;
import core.DTNHost;
import core.Message;
import core.Settings;
import core.SimClock;

/**
 * Implementation of Spray and wait router as depicted in 
 * <I>Spray and Wait: An Efficient Routing Scheme for Intermittently
 * Connected Mobile Networks</I> by Thrasyvoulos Spyropoulus et al.
 *
 */
public class nSAWRouter extends ActiveRouter {
		
		/** IDs of the messages that are known to have reached the final dst */
		private Set<String> ackedMessageIds;
		
		/** delivery predictability initialization constant*/
		public static final double P_INIT = 0.75;
		/** delivery predictability transitivity scaling constant default value */
		public static final double DEFAULT_BETA = 0.25;
		/**
		 * Transitivity scaling constant (beta) -setting id ({@value}).
		 * Default value for setting is {@link #DEFAULT_BETA}.
		 */
		public static final String BETA_S = "beta";
		/** value of beta setting */
		private double beta;
		/** delivery predictability aging constant */
		public static final double GAMMA = 0.98;
		/** the value of nrof seconds in time unit -setting */
		  int secondsInTimeUnit;
	
		  /**
			 * Number of seconds in time unit -setting id ({@value}).
			 * How many seconds one time unit is when calculating aging of 
			 * delivery predictions. Should be tweaked for the scenario.*/
			public static final String SECONDS_IN_UNIT_S ="secondsInTimeUnit";
			
	/** identifier for the initial number of copies setting ({@value})*/ 
	public static final String NROF_COPIES = "nrofCopies";
	/** identifier for the binary-mode setting ({@value})*/ 
	public static final String BINARY_MODE = "binaryMode";
	/** SprayAndWait router's settings name space ({@value})*/ 
	public static final String nSAW_NS = "nSAWRouter";
	/** Message property key */
	public static final String MSG_COUNT_PROPERTY = nSAW_NS + "." +
		"copies";
	
	protected int initialNrofCopies;
	protected boolean isBinary;

	public nSAWRouter(Settings s) {//初始化需要配置文件中信息的变量 
		super(s);
		Settings nSAWSettings = new Settings(nSAW_NS);
		if (nSAWSettings.contains(BETA_S)) {
			beta = nSAWSettings.getDouble(BETA_S);
		}
		else {
			beta = DEFAULT_BETA;
		}
		initialNrofCopies = nSAWSettings.getInt(NROF_COPIES);
		isBinary = nSAWSettings.getBoolean( BINARY_MODE);
		secondsInTimeUnit = nSAWSettings.getInt(SECONDS_IN_UNIT_S);
		
	}
	
	/**
	 * Copy constructor.
	 * @param r The router prototype where setting values are copied from
	 */
	protected nSAWRouter(nSAWRouter r) {//首先将需要配置文件信息的变量初始化，然后初始化不需要配置文件信息的变量
		super(r);
		this.beta=r.beta;
		this.initialNrofCopies = r.initialNrofCopies;
		this.isBinary = r.isBinary;
		this.secondsInTimeUnit=r.secondsInTimeUnit;
		this.endtime=r.endtime;
		this.deleteDelivered=r.deleteDelivered;//在activeRouter中定义
		this.msgttl=r.msgttl;
		
		this.toTrans=new HashMap<Message,Connection>();
		this.ackedMessageIds=new HashSet<String>();
	}
	
	/*我添加的代码*/
	/*
	 * 相遇节点连接建立时更新效用值
	 * 4.这里是当本节点和其他节点刚建立连接时的操作
	 * 比较适合用来交换历史相遇信息，更新效用值，删除一些不需要的消息等等
	 */
	public void changedConnection(Connection con) { 
		 if (con.isUp()) {
		 DTNHost otherHost = con.getOtherNode(getHost());//获得连接的对方主机
		 /**
		  * ACK表，也就是每个节点都有一张ACK表记录投递成功的消息的id
		  * 当两个节点建立连接时，交换ack表做并集，然后各自删除自己缓存中和
		  * ack表中对应的消息
		  */
		 checkAck(otherHost);
		 /**
		  * 更新效用值，主要是节点交换和更新历史相遇信息表
		  */
		 countUtility(otherHost);
	     }
	}
	
	// 更新ACK表并删除多余副本
	private void checkAck(DTNHost otherHost) {

		MessageRouter mRouter = otherHost.getRouter();

		assert mRouter instanceof MaxPropRouter : "MaxProp only works "
				+ " with other routers of same type";
		nSAWRouter otherRouter = (nSAWRouter) mRouter;

		/* exchange ACKed message data */
		this.ackedMessageIds.addAll(otherRouter.ackedMessageIds);
		// otherRouter.ackedMessageIds.addAll(this.ackedMessageIds);

		deleteAckedMessages();

		// otherRouter.deleteAckedMessages();
	}
	
	/**
	 * Deletes the messages from the message buffer that are known to be ACKed
	 */
	private void deleteAckedMessages() {
		for (String id : this.ackedMessageIds) {
			if (this.hasMessage(id) && !isSending(id)) {
				this.deleteMessage(id, false);
			}
		}
	}
	/*
	 * 更新效用值(历史效用表和效用表)
	 * (连接的两个节点同时被处理)
	 */
	private void countUtility(DTNHost otherHost) {
		DTNHost sourceHost = getHost();// 本地主机

		double timeDiff = (SimClock.getTime() / secondsInTimeUnit);
		updatehu(otherHost, (int) timeDiff);// 主机更新等待历史效用表
		updateFinUtility(sourceHost, otherHost);// 主机更新效用表
	}
	
	/**
	 * 更新效用表。
	 * @param DTNHost 邻居节点
	 * @param interval 仿真开始到当前时间的时间间隔
	 */
	public void updatehu(DTNHost key,int interval) {
		//该邻居节点不在当前节点历史效用表中
		if(!getHost().gethu().containsKey(key))
		{
			HashMap<Integer,Integer> dtnhash=new HashMap<Integer,Integer>();
			dtnhash.put(interval, 1);
			getHost().sethu(key, dtnhash);
		}else{
			HashMap<Integer,Integer> dtnhash=getHost().gethu().get(key);
			//该间隔不存在,初始化
			if(!dtnhash.containsKey(interval))
			{
				dtnhash.put(interval, 1);	
			}
			else
			{	
				int value=dtnhash.get(interval)+1;//更新相遇次数
				dtnhash.put(interval,value);			
			}	
			getHost().sethu(key, dtnhash);
		}
		
	}
	
	/**
	 * 更新FIN效用表。
	 */
	public void updateFinUtility(DTNHost host,DTNHost other) {	//更新对方效用表信息
		//更新当前节点的信息(邻居节点中的效用表)
		updateFinUtilityItem(host);
		//更新邻居节点的信息(当前节点的效用表)
		updateFinUtilityItem(other);
	}
	
	//更新节点效用的方法
		public void updateFinUtilityItem(DTNHost other) {
			//更新当前节点的效用信息,坐标，时间，平均速度，平均方向，更新时间，通信范围？
			HashMap<String, Double> dtnhash=getHost().getFinUtility().get(other);//获得节点的效用表
			
			double hostX =other.getLocation().getX();
			double hostY =other.getLocation().getY();
			double hostSpeed=other.getSpeed();
			double avgDirection=0;
			double count=updateDeliveryPredFor(other);
			updateTransitivePreds(other);//更新投递预测值
			
			if(dtnhash!=null){
				if((double)dtnhash.get("updateTime")<SimClock.getTime()){
					double lastX=dtnhash.get("x");
					double lastY=dtnhash.get("y");
					hostSpeed=(hostSpeed+dtnhash.get("avgSpeed"))/2;
					avgDirection=Math.atan2(hostY-lastY,hostX-lastX)*(180/Math.PI);
				}else{
					avgDirection=(double)dtnhash.get("avgDirection");
					hostSpeed=(double)dtnhash.get("avgSpeed");
				}				
			}
			
			HashMap<String,Double> newData=new HashMap<String,Double>();
			newData.put("avgSpeed", hostSpeed);
			newData.put("x", hostX);
			newData.put("y", hostY);
			newData.put("count",count);
//			System.out.println("节点"+other+"角度"+avgDirection);
			newData.put("avgDirection", avgDirection);
			newData.put("updateTime", SimClock.getTime());
			getHost().setFinUtility(other, newData);//更新	
		}
		
		//更新历史投递效用
		private double updateDeliveryPredFor(DTNHost other) {
					
			double oldValue = getPredFor(other);//得到旧的投递值
			double newValue = oldValue + (1 - oldValue) * P_INIT;
			return newValue;
		}
		//计算传递效率
		public double getPredFor(DTNHost other) {
					
			ageDeliveryPreds(); // 建立连接时更新衰减投递预测值
			HashMap<String, Double> tmpHost=other.getFinUtility().get(other);
			if (tmpHost !=null) {
				return tmpHost.get("count");
			}else {
				return 0;
			}
		}
		//更新传递效率
		private void ageDeliveryPreds() {
			  
			double timeDiff = (SimClock.getTime() - getHost().getlastAgeUpdate()) / secondsInTimeUnit;
//	        		System.out.println("可以更新"+timeDiff);
					if (timeDiff == 0) {
						return;
					}
					double mult = Math.pow(0.98, timeDiff);
					for (HashMap.Entry<DTNHost, HashMap<String,Double>>e : getHost().getFinUtility().entrySet()) {
						e.getValue().put("count",e.getValue().get("count")*mult);
					}
			getHost().setlastAgeUpdate(SimClock.getTime());
			}
		//更新传递投递值
		private void updateTransitivePreds(DTNHost other) {
			double pForHost = getPredFor(other); // P(a,b)		
			HashMap<DTNHost, HashMap<String,Double>>  othersPreds = other.getFinUtility();//获得对方路由的投递预测值集合
			for (Map.Entry<DTNHost, HashMap<String,Double>> e : othersPreds.entrySet()) {
				if (e.getKey() == getHost()) {
					continue; // don't add yourself
				}
				
				double pOld = getPredFor(e.getKey()); // P(a,c)_old
				double pNew = pOld + ( 1 - pOld) * pForHost * e.getValue().get("count") * beta;//beta
//				System.out.println("old"+e.getValue().get("count")+"::new"+pNew);
				e.getValue().put("count",pNew);
			}
		}
		//历史投递效用结束	
	/***********/
	
	
	@Override
	public int receiveMessage(Message m, DTNHost from) {
		return super.receiveMessage(m, from);
	}
	
	@Override
	public Message messageTransferred(String id, DTNHost from) {
		Message msg = super.messageTransferred(id, from);
		Integer nrofCopies = (Integer)msg.getProperty(MSG_COUNT_PROPERTY);
		
		assert nrofCopies != null : "Not a SnW message: " + msg;
		
		if (isBinary) {
			/* in binary S'n'W the receiving node gets ceil(n/2) copies */
			nrofCopies = (int)Math.ceil(nrofCopies/2.0);
		}
		else {
			/* in standard S'n'W the receiving node gets only single copy */
			nrofCopies = 1;
		}
		
		msg.updateProperty(MSG_COUNT_PROPERTY, nrofCopies);
		return msg;
	}
	
	
	/*增加消息副本数量字段*/
	@Override 
	public boolean createNewMessage(Message msg) {
makeRoomForNewMessage(msg.getSize());
		
		msg.setTtl(this.msgTtl);
		msg.addProperty(SPRAY_TIMES,0);//添加喷发启始次数
		msg.addProperty(SPRAY_FLAG,0);//添加喷发标识0-喷发中 1-启动喷发
		msg.addProperty(MSG_COUNT_PROPERTY, new Integer(initialNrofCopies));
		addToMessages(msg, true);
		return true;
	}
	
	@Override
	public void update() {
		super.update();
		if (!canStartTransfer() || isTransferring()) {
			return; // nothing to transfer or is currently transferring 
		}

		/* try messages that could be delivered to final recipient */
		if (exchangeDeliverableMessages() != null) {
			return;
		}
		
		/* create a list of SAWMessages that have copies left to distribute */
		@SuppressWarnings(value = "unchecked")
		List<Message> copiesLeft = sortByQueueMode(getMessagesWithCopiesLeft());
		/**
		 * 1.获得未喷发过且当前的副本数为一的消息
		 * 因为saw是通过消息的副本数量来区分是该消息处于等待阶段
		 * 或是喷发阶段。
		 * 所以这里的方法主要是来筛选出各个阶段的消息，方便后面做不同的处理。
		 * 比如上面的copiesLeft就是喷发阶段的消息,而copiesOne是等待阶段的消息,copiesBin是已喷发副本数为为一的消息
		 */
		@SuppressWarnings(value ="unchecked")
		List<Message> copiesOne = sortByQueueMode(getMessagesWithCopiesOne());
		@SuppressWarnings(value ="unchecked")
		List<Message> copiesBin = sortByQueueMode(getMessagesWithCopiesBin());
		
		/**
		 * 2.处理喷发阶段的消息
		 * 下面的三个if是针对上面不同阶段的消息（copiesLeft，copiesOne，copiesBin）
		 * 应用不同的策略去处理,比如下面第一个策略
		 */
		/**向邻居节点分发消息*/
		if (copiesLeft.size() > 0) {
			/* try to send those messages */
			this.tryMessagesToConnectionsFin(copiesLeft,getConnections());
		}
		//等待阶段副本为一再次喷发
		if(copiesOne.size() > 0){//自写代码	

			this.tryMessagesToConnectionsWait(copiesOne, getConnections());	
		}
		//等待阶段副本大于一再次喷发
		if (copiesBin.size() > 0) {
			/*向邻居节点二分分发这些消息*/
			this.tryMessagesToConnectionsWait(copiesBin, getConnections());
		}
	}
	
	/**节点副本数大于1且未进行二次喷射的副本
	 * Creates and returns a list of messages this router is currently
	 * carrying and still has copies left to distribute (nrof copies > 1).
	 * @return A list of messages that have copies left
	 */
	protected List<Message> getMessagesWithCopiesLeft() {
		List<Message> list = new ArrayList<Message>();

		for (Message m : getMessageCollection()) {
			Integer nrofCopies = (Integer)m.getProperty(MSG_COUNT_PROPERTY);
			assert nrofCopies != null : "SnW message " + m + " didn't have " + 
				"nrof copies property!";
			Integer sprayTimes = (Integer)m.getProperty(SPRAY_TIMES);
			if (nrofCopies > 1 && sprayTimes==0) {
				list.add(m);
			}
		}
		
		return list;
	}
	
	/********我写的代码******/
	
	/**
	 * 创建并返回当前路由携带和需要转发的消息副本的消息列表（节点副本数>1）二进制
	 */
protected List<Message> getMessagesWithCopiesBin() {
	List<Message> list = new ArrayList<Message>();

	for (Message m : getMessageCollection()) {
		Integer nrofCopies = (Integer)m.getProperty(MSG_COUNT_PROPERTY);//得到消息副本数量的属性
		assert nrofCopies != null : "SnW message " + m + " didn't have " + 
			"nrof copies property!";
		Integer sprayTimes = (Integer)m.getProperty(SPRAY_TIMES);	
		if (nrofCopies > 1 && sprayTimes>0) {
			list.add(m);
		}
	}
	return list;
}
/**
 * 创建并返回当前路由携带的节点副本数为一的消息副本的消息列表(一次和二次喷发副本数为1)？？？？
 */
protected List<Message> getMessagesWithCopiesOne() {
	List<Message> list = new ArrayList<Message>();

	for (Message m : getMessageCollection()) {
		Integer nrofCopies = (Integer)m.getProperty(MSG_COUNT_PROPERTY);//得到消息副本数量的属性
	
		assert nrofCopies != null : "SnW message " + m + " didn't have " + 
			"nrof copies property!";
		
		Integer sprayTimes = (Integer)m.getProperty(SPRAY_TIMES);//得到消息转发次数
	
			if (nrofCopies == 1 && sprayTimes<2) {//开销大（解决）
				m.updateProperty(SPRAY_TIMES,sprayTimes+1);
				m.updateProperty(SPRAY_FLAG,1);
				list.add(m);				
			}
	}	
	return list;
}
/***********/
	
	/**
	 * Called just before a transfer is finalized (by 
	 * {@link ActiveRouter#update()}).
	 * Reduces the number of copies we have left for a message. 
	 * In binary Spray and Wait, sending host is left with floor(n/2) copies,
	 * but in standard mode, nrof copies left is reduced by one. 
	 */
	@Override
	protected void transferDone(Connection con) {
		Integer nrofCopies;
		String msgId = con.getMessage().getId();
		/* get this router's copy of the message */
		Message msg = getMessage(msgId);

		if (msg == null) { // message has been dropped from the buffer after..
			return; // ..start of transfer -> no need to reduce amount of copies
		}
		
		/* reduce the amount of copies left */
		nrofCopies = (Integer)msg.getProperty(MSG_COUNT_PROPERTY);
		if (isBinary) { 
			nrofCopies /= 2;
		}
		else {
			nrofCopies--;
		}
		msg.updateProperty(MSG_COUNT_PROPERTY, nrofCopies);
	}
	@Override
	public nSAWRouter replicate() {
		return new nSAWRouter(this);
	}
}
